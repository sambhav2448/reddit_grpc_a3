# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.RedditService/CreatePost',
                request_serializer=reddit__pb2.PostCreationRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.VoteOnPost = channel.unary_unary(
                '/reddit.RedditService/VoteOnPost',
                request_serializer=reddit__pb2.PostVoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.GetPostDetails = channel.unary_unary(
                '/reddit.RedditService/GetPostDetails',
                request_serializer=reddit__pb2.PostDetailsRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.RedditService/CreateComment',
                request_serializer=reddit__pb2.CommentCreationRequest.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.VoteOnComment = channel.unary_unary(
                '/reddit.RedditService/VoteOnComment',
                request_serializer=reddit__pb2.CommentVoteRequest.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.GetTopComments = channel.unary_unary(
                '/reddit.RedditService/GetTopComments',
                request_serializer=reddit__pb2.TopCommentsRequest.SerializeToString,
                response_deserializer=reddit__pb2.TopCommentsResponse.FromString,
                )
        self.GetCommentThread = channel.unary_unary(
                '/reddit.RedditService/GetCommentThread',
                request_serializer=reddit__pb2.CommentThreadRequest.SerializeToString,
                response_deserializer=reddit__pb2.CommentThreadResponse.FromString,
                )


class RedditServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteOnPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteOnComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommentThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.PostCreationRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'VoteOnPost': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteOnPost,
                    request_deserializer=reddit__pb2.PostVoteRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'GetPostDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostDetails,
                    request_deserializer=reddit__pb2.PostDetailsRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.CommentCreationRequest.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'VoteOnComment': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteOnComment,
                    request_deserializer=reddit__pb2.CommentVoteRequest.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'GetTopComments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopComments,
                    request_deserializer=reddit__pb2.TopCommentsRequest.FromString,
                    response_serializer=reddit__pb2.TopCommentsResponse.SerializeToString,
            ),
            'GetCommentThread': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommentThread,
                    request_deserializer=reddit__pb2.CommentThreadRequest.FromString,
                    response_serializer=reddit__pb2.CommentThreadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreatePost',
            reddit__pb2.PostCreationRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteOnPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/VoteOnPost',
            reddit__pb2.PostVoteRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/GetPostDetails',
            reddit__pb2.PostDetailsRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/CreateComment',
            reddit__pb2.CommentCreationRequest.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteOnComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/VoteOnComment',
            reddit__pb2.CommentVoteRequest.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/GetTopComments',
            reddit__pb2.TopCommentsRequest.SerializeToString,
            reddit__pb2.TopCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommentThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.RedditService/GetCommentThread',
            reddit__pb2.CommentThreadRequest.SerializeToString,
            reddit__pb2.CommentThreadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
